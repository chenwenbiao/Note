实现多任务的设计采用什么样的模式,有几种方式实现？
要实现多任务，通常我们会设计Master-Worker模式，Master负责分配任务，Worker负责执行任务，
因此，多任务环境下，通常是一个Master，多个Worker。
a,如果用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker。
b,如果用多线程实现Master-Worker，主线程就是Master，其他线程就是Worker。

谈谈你对多进程和多线程的关系
答：多任务可以由多进程完成，也可以由一个进程内的多线程完成.进程是由多个线程组成，一个进程至少由一个线程组成.
线程是操作系统最小的执行单元，如何调度线程和进程由操作系统决定，程序自己不能决定什么时候执行，执行多长时间.
多进程和多线程的程序涉及到同步、数据共享的问题。

多进程和多线程的区别是什么,以及各自有什么优缺点？
不同之处: 多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，
而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，
因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。
优缺点:
1，多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。
（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）
著名的Apache最早就是采用多进程模式
2, 多进程模式的缺点是创建进程的代价大,另外,操作系统能同时运行的进程数也是有限的，
在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。
3, 多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存

多线程的Lock使用理由，出现的原因:
高级语言的一条语句在CPU执行时是若干条语句,修改共享变量需要多条语句，而执行这几条语句时，
线程可能中断，从而导致多个线程把同一个对象的内容改乱了,所以，我们必须确保一个线程在修改共享变量的时候，别的线程一定不能改,
所以就要给线程上一把锁，当某个线程开始执行时，我们说，该线程因为获得了锁，因此其他线程不能同时操作这个变量，只能等待，直到锁被释放后，获得该锁以后才能改。由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。创建一个锁就是通过threading.Lock()来实现：
当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。
获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用try...finally来确保锁一定会被释放。
锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。

谈谈对多线程的理解
任何进程默认就会启动一个线程，该线程称作主线程，名字叫MainThread,主线程又可以启动新线程，
Python的threading模块有一个叫current_thread()的方法，他永远返回当前线程的实例，主线程实例的名字叫MainThread,
子线程的名字再创建的时候指定，如果不起名字Python就自动给线程命名为Thread-1，Thread-2。

多任务的类型一般都分为什么？
是否采用多任务的第二个考虑是任务的类型。我们可以把任务分为计算密集型和IO密集型
1， 计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，
全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，
但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，
所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。
计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。
Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。

2，第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，
这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。
对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。 
IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，
用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，
完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。

python中怎么使用线程？
python标准库中提供了2个模块供我们使用线程：_thread,threading,_thread是低级模块，threading是高级模块，对_thread进行了封装，
大多数情况下，我们使用threading就够了。
启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行.

谈谈你对GIL 全局解释锁的理解:
任何python线程执行之前都要先获得GIL全局解释锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程由机会执行，这
GIL锁实际上是把所有的线程的执行代码都上了锁，所以多线程再python中只能交替执行，
也就是某一时刻只能由一个线程执行，即使100个线程跑在100核CPU上，也只能用到1个核，
Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。

ThreadLocal变量怎么理解他的作用？举例ThreadLocal的使用？
ThreadLocal变量虽然是全局变量，但是每个线程只能读取自己线程的独立副本，互补干扰，ThreadLocal解决了
参数在一个线程中各个函数之间互相传递的问题.
ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，
这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。

浅谈异步IO
考虑到CPU和IO之间巨大的速度差异，一个任务在执行的过程中大部分时间都在等待IO操作.
如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，
这种全新的模型称为事件驱动模型，Nginx就是支持异步IO的Web服务器，
它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，
可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。
由于系统总的进程数量十分有限，因此操作系统调度非常高效。用异步IO编程模型来实现多任务是一个主要的趋势。

对应到Python语言，单线程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。

谈谈你对分布式进程的理解：
在Thread和Process中，应当优选Process，因为Process更稳定，
而且，Process可以分布到多台机器上，而Thread最多只能分布到同一台机器的多个CPU上。
Python的multiprocessing模块不但支持多进程，其中managers子模块还支持把多进程分布到多台机器上。

谈谈你对Mixin的理解
在面向对象的编程语言中，Mixin是一个包含其他类使用的方法的类，而不必是其他类的父类。

