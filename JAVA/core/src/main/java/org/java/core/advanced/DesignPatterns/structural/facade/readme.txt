Facade Design Pattern是结构设计模式之一(例如Adapter模式和Decorator模式）。
Facade设计模式用于帮助client应用程序轻松与系统交互

根据GoF,Facade的设计模式是:

为子系统中的一组接口提供统一接口。 Facade Pattern定义了一个更高级别的接口，使子系统更易于使用。

假设我们有一个带有一组接口的应用程序来使用MySql/Oracle数据库并生成不同类型的报告，
例如HTML报告，PDF报告等。

因此，我们将使用不同的接口集来处理不同类型的数据库。现在，客户端应用程序可以使用这些接
口来获取所需的数据库连接并生成报告。

但是当复杂性增加或接口行为名称混乱时，客户端应用程序将难以管理它。

因此，我们可以在此处应用Facade设计模式，并在现有接口之上提供
包装器接口(wrapper interface)以帮助客户端应用程序。

Facade Design Pattern Important Points:

1. Facade设计模式更像是client应用程序的帮助器，
Facade设计模式不会隐藏子系统接口。是否使用Facade完全取决于客户端代码。

2. 外观设计模式可以应用于任何开发点，通常是当接口数量增加和系统变得复杂时使用.

3. 子系统接口不知道Facade，它们不应该有Facade接口的任何引用。

4. Facade设计模式应该应用于类似的接口，其目的是提供单个接口而不是多个接口来完成类似的工作。

5. 我们可以将工厂模式与Facade一起使用，为客户端系统提供更好的接口。

## 外观模式

外观模式用来包装一组接口用于方便使用。 比如系统中分10个模块，有个功能需要组合使用所有的模块，这个时候就需要一个包装类包装这10个接口，然后进行业务逻辑的调用
