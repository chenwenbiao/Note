一个jar包的gradle如何配置：https://mvnrepository.com/artifact/com.google.code.gson/gson/2.8.5

Grunt和Gulp是两个流行的构建和自动化工具，用于JavaScript项目，如NodeJS或jQuery。 Gant是一种主要用于基于Groovy的应用程序的构建工具。 SBT代表Scala Build Tool。 SBT主要用于基于Scala的应用程序。

现在，大多数java项目都使用maven或gradle构建工具，因为与ant相比它们具有优势。

简单一点： Gradle = Ant + Ivy + Maven + Gant

这意味着Gradle结合了所有流行构建工具的最佳功能：

- Ivy和Ant的强大(Power)和灵活性
- Maven易于使用，生命周期管理和依赖管理
- Gant的构建脚本

What is Gradle’s Motto?(什么是Gradle的座右铭？)

“Make the impossible possible, make the possible easy, and make the easy elegant”.

截至目前，Gradle作为以下项目的构建和自动化工具:

- Java/Scala/Groovy Based Projects
- Android Projects
- C/C++ Projects
- JavaScript Based Projects

* Ant的默认构建脚本名称为build.xml
* Maven默认构建脚本名称为pom.xml
* Gradle默认构建脚本名称为build.gradle

### Using Gradle Eclipse Plugin

> File >> New >> Other >> Gradle(STS) Project

Gradle项目与Maven项目结构相同。 是的，Gradle使用Maven Project结构，但是我们有build.gradle文件而不是pom.xml文件。

#### Eclipse中如何构建我们的项目?

1.右键单击Project的build.gradle文件，然后选择“Run As”>>“Gradle build”

2. 我们需要输入我们所需的Gradle命令“build”(We need to type our required Gradle commands “build”)，点击“Apply”按钮来应用我们的更改, 然后单击“运行”按钮启动我们的Gradle构建commnad“gradle build”


当我们运行gradle build命令时，它会执行以下操作：

- 它编译java文件,生成class文件.
- 它在${PROJECT_ROOT_DIR}\build\libs中生成名对应的jar
- 它执行JUnit文件

gradle是构建和依赖管理工具

1. 与Maven一样(Like Maven)，我们可以将现有的ANT任务集成到Gradle中，并在我们的项目中使用它们
2. 像Maven一样，我们可以创建自己的项目特定Gradle任务，并在我们的项目中使用它们
3. 我们甚至可以使用Gradle构建工具集成Maven任务

gradle的元素:

1. group元素
2. baseName元素
3. version元素

1. 查看gradle版本: gradle --version
2. gradle assemble(在gradle创建JAR/WAR/EAR文件)
3. gradle test(要在不创建应用程序JAR/WAR/EAR文件的情况下仅运行JUnit测试,也就是compile and run unit test[编译并运行单元测试].)
4. gradle clean(总是建议在编译和构建我们的应用程序代码之前清理所有内容--删除构建目录)
5. gradle –help
6. gradle install(要编译，构建(构建成jar/war/ear文件)并且安装到本地maven存储库)
7. gradle –version
8. gradle -x test install(要跳过JUnit测试并执行其他任务)
9. gradle build(运行JUnits并创建JAR/WAR/EAR[To compile, tests and assemble去编译，测试，然后组装成jar/war/ear文件]-----注意：在maven和gradle中，我们可以管道两个或更多命令执行它们。)
10. gradle jettyRun(使用已创建的WAR文件运行我们的Web应用程序在嵌入式Jetty服务器中)
11. Gradle为每个服务器都有单独的命令来运行已经创建的JAR/WAR文件。
12. gradle jettyRunWar(构建WAR文件，并且部署并运行它到嵌入式jetty服务器中)
13. gradle jar or gradle libs(从已经编译好的class文件创建JAR文件)
14. gradle eclipse(生成项目和所有Eclipse所需的文件)
15. gradle cleanEclipse(清理Eclipse所需的所有文件)


我们可以在${PROJECT_ROOT_DIR}/build/libs/下看到新生成的war文件。
我们可以在${PROJECT_ROOT_DIR}/build/classes/main/[our-package-structure] /*.class中观察到编译好的*.class文件


观察基于SpringMVCExample 的Maven项目和基于SpringMVCExample 的Gradle项目,可以得出以下结论:

1. 我们得到相同的war文件和输出。
2. Maven的pom.xml是XML文件，其中Gradle的build.gradle文件是纯文本文件。
3 Maven的pom.xml太大了，包含很多XML配置。 Gradle的build.gradle包含非常小的配置。
4. Gradle的build.gradle文件包含较少的配置和非常轻量级的构建脚本文件。

由于这些原因，现在大多数新项目都是从Gradle构建工具开始，现有项目正在从Maven转换为Gradle。