Below are the steps to follow for converting maven to gradle application:

1. Import this spring mvc maven project into Eclipse IDE.
2. Remove pom.xml file(要注意备份一下)
3. Create empty build.gradle file.
4. Now start converting each and every component from pom.xml to build.gradle file.

a. Base build.gradle template file: build.gradle

b. As it is a Spring MVC web application, we need to create WAR file. 
So Please apply war plugin and define war attributes as shown below.
Also Provide war file name and it’s version.

apply plugin: "war"
war {
    baseName = 'SpringMVCExample'
    version = '1.0.0-BUILD-SNAPSHOT'
}

Add Spring Dependencies as shown below:

dependencies {
    compile("org.springframework:spring-context:4.0.0.RELEASE")
    compile("org.springframework:spring-webmvc:4.0.0.RELEASE")
    compile("org.aspectj:aspectjrt:1.7.4")
}


Add rest of our application Dependencies as shown below:
添加我们的其他应用程序依赖项，如下所示:


dependencies {
    compile("javax.inject:javax.inject:1")
    compile("javax.servlet:servlet-api:2.5")
    compile("javax.servlet:jstl:2.5")
    compile("javax.servlet.jsp:jsp-api:1.2")	
    compile("org.slf4j:slf4j-api:1.7.5")
    compile("org.slf4j:jcl-over-slf4j:1.7.5")
    compile("org.slf4j:slf4j-log4j12:1.7.5")
    compile("log4j:log4j:1.2.15")
}

Add our Application Unit Test dependencies as shown below.

dependencies {
    testCompile("junit:junit:4.7") 
}

We use “compile()” element to add dependencies:

compile("org.springframework:spring-context:4.0.0.RELEASE")

We use “providedRuntime()” element to add dependencies at runtime:

providedRuntime("javax.servlet:jstl:2.5")

We use “testCompile()” element to add dependencies for running only unit tests:

testCompile("junit:junit:4.7") 

Our Application complete build.gradle dependencies are shown below.

build.gradle

dependencies {
    compile("org.springframework:spring-context:4.0.0.RELEASE")
    compile("org.springframework:spring-webmvc:4.0.0.RELEASE")
    compile("org.aspectj:aspectjrt:1.7.4")

    compile("javax.inject:javax.inject:1")
    compile("javax.servlet:servlet-api:2.5")
    compile("javax.servlet:jstl:2.5")
    compile("javax.servlet.jsp:jsp-api:1.2")	
    compile("org.slf4j:slf4j-api:1.7.5")
    compile("org.slf4j:jcl-over-slf4j:1.7.5")
    compile("org.slf4j:slf4j-log4j12:1.7.5")
    compile("log4j:log4j:1.2.15")

    testCompile("junit:junit:4.7") 
}

Open command prompt at Project Root Directory to execute gradle commands:

Now build war file by executing the following gradle commands.

gradle clean
gradle build

Or execute both commands at once using the following syntax.
 It’s similar to executing Maven commands.

gradle clean build

I always recommend everyone to use “clean” command 
before building our application. It cleans our 
old build stuff,compiles and creates new WAR/JAR 
with latest files.

Observe our newly created war file at 
${PROJECT_ROOT_DIR}/build/libs/ folder as shown below.

spring mvc gradle war file

War file is created with given Name 
and Version in build.gradle file. i.e:
SpringMVCExample-1.0.0-BUILD-SNAPSHOT.war

