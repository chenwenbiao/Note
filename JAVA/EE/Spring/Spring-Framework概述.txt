## Spring Framework

掌握Spring Framework的基础知识，是进一步学习其他Spring技术，比如Spring MVC和Spring Cloud等的基础

### “失败”的Java EE（原先的J2EE）

因为J2EE实在弄得太复杂了，难学难用！JavaEE是一组规范的集合，其技术的核心就是EJB（EnterpriseJava Bean）及其容器。

开发一个EJB需要实现特定的接口，还有大量的配置文件（直至EJB2.0的年代，开发一个EJB还需要配置两个文件），弄得配置的工作量比写代码的工作量还要大，一旦配置有错，噩梦开始……

EJB跑在EJB容器中，而Java Web（主要是JSP和Servlet）跑在Web容器中，可以想象，如果Servlet要调用EJB，就意味着Web容器调用EJB容器，这里头的配置实在太烦人了！而且性能不佳，调试复杂

Java EE败就败在太复杂！类似的，微软的WCF也是输在这点上！

### Spring的主要特点

1. Spring使用“依赖注入”这种手段来管理各类Java资源，降低了各种资源的耦合。
2. Spring通过动态代理技术实现了面向切面的编程（AOP），避免了编写大量重复的代码。

### Spring技术的演化

1. Spring Framework - XML配置为主-->注解为主
2. Spring Boot - 手工编程-->自动化配置
3. Spring Cloud - 单体应用--->分布式微服务系统

Spring技术家庭是当前Java的主流技术。Spring“全家桶”历经多年发展， Spring己经发展成为
一个“成员众多”的技术家族，在Java开发领域占据统治地位。

### Spring Framework的技术特点

Spring框架主要提供了对IoC（依赖反转）容器、 AOP（面向切面编程）、 数据访问、 Web开发、消息、测试等相关技术特性的支持。

Spring使用简单的POJO（Plain Old Java Object，即无特殊要求的普通Java对象）来进行企业级开发。每一个被Spring管理的Java对象都称之为Bean；而Spring提供了一个IoC容器用来初始化Bean对象， 解决Bean对象间的依赖管理和对象的使用。

经过多年的发展， Spring己经发展成为一个庞大的技术家族，包容诸多的成员，并且成为Java EE开发领域事实上的标准

## Spring Framework中最重要的两个核心特性

* 依赖注入（DI： DependencyInjection）
* 面向切面编程（AOP： Aspect-OrientedProgramming）

### 依赖注入

很多框架通过强迫应用继承它们的特定类或实现它们的特定接口从而导致应用与框架绑死。

为了用某个框架，我自己写的MyClass类，必须继承自Base类，实现ICanDo接口。Java EE中这种情况非常常见，如下:

        Base
          ^         .-------MyClass
        继|承     ICanDo 
        MyClass

Spring使用依赖注入的方式解决了这个问题.MyClass类该怎么写就怎么写，你只需要告诉框架你“需要什么”就行了，框架会自动提供给你。无需继承特定的类，或实现特定的接口,如下:
        [依赖]        [依赖]
         |              |
         |inject        |inject
         |              |
         |-->MyClass<----

### AOP

面向切面编程（aspectoriented programming， AOP）有助于将遍布应用各处的功
能分离出来形成可重用的组件.

系统由许多不同的组件组成，每一个组件各负责一块特定功能，其职责不能也不应该重叠.
诸如日志模块、事务管理和安全模块，等这样的系统服务为多个组件所需要，它们通常被称为“横切关注点”， AOP能方便让它们被多个组件所重用.

### Spring Framework Runtime

下图展示了Spring Framework（5.0以前版本）的各个组成部分，可以看到它拥有一个分层的组件
化架构，并且这些组件可以随着技术的发展而被单独替换掉，遵循开放规范且可方便替换，是Spring生命力的主要来源。
```
        Data Access / Integration                      Web
          JDBC            ORM                 WebSocket   Servlet
          OXM             JMS                   Web        Portlet
              Transaction

                AOP       Aspects     Instrumentation Messaging

                            Core Container
          Beans         Core           Context        SpEL

                                Test

```

#### 小结： Spring Framework的主要特性

1. ①使用POJO进行轻量级和最小侵入式开发。
2. ②通过依赖注入和基于接口编程实现松耦合。
3. ③通过AOP和默认约定进行声明式编程，减少模式化的固定而重复的代码。
4. ④Spring是开放的，能很方便地整合其他开发框架。

## Spring Boot

### Spring Boot是什么？

从本质上来说， Spring Boot就是Spring，它做了那些没有它你自己也会去做的Spring Bean配置。简单地说，就是在早期技术的基础之上，实现了“自动化”配置。

Spring Framework + 自动化配置 = Spring Boot

Spring Boot是当前Spring应用开发的主流。新项目不要再使用早期的Spring技术（比如使用XML定义Bean）。

#### Spring Boot的特点

1. Spring Boot提供了一些预先组织好的“起步依赖（spring-bootstarter）”，从而使开发者不再需要自行维护复杂的组件（jar包）依赖，而是只需要声明“我需要什么功能”就行了。
2. Spring Boot让Spring应用开发，从早期的以“组件为中心”，转换为“以功能为中心”。
3. Spring Boot 2.0与1.0有许多变化，并且只支持JDK 8及以上版本。
4. Spring Boot 在应用程序里嵌入了一个Servlet容器（Tomcat、 Jetty或Undertow），可独立运行，无需部署到外部的Servlet容器中。
5. Spring Boot 2.0还提供了支持响应式编程特性的容器（默认为Netty）， 因此，它就是一个jar包，可以直接使用java –jar命令来运行。
6. Spring Boot提供了一整套工具，称为Spring Boot Actuator，可以用于
监控Spring Boot应用程序运行的状态。
7. Spring技术家族的其他成员（比如Spring MVC），基本上都针对Spring
Boot进行了调整或重写，并且增加了新的成员，比如Web Flux。
8. Spring Boot还是Spring Cloud技术的基础，单个的微服务，可以使用Spring Boot来开发。
9. 要学习Spring，从Spring Boot起步！
10. Spring Boot 2.0基于Spring Framework 5.0构建，并提供了两个技术栈。
11. Servlet技术栈用于开发经典的Java Web应用，使用MVC框架，能很方便地访问各种数据
库，跑在Tomcat这种经典Web容器上。
12. Reactive技术栈是全新的，用于开发高性能的分布式软件系统系统，特别适合于开发微
服务.

##### Reactive Stack

Spring WebFlux is a non-blocking web framework built from the ground up 
to take advantage of multi-core, next-generation processors and handle
massive numbers of concurrent connections.

1. Netty, Servlet3.1+ Containers
2. Reactive Streams Adapters
3. Spring Security Reactive
4. Spring WebFlux
5. Spring Data Reactive Repositories Mongo, Cassandra, Redis, Couchbase

##### Servlet Stack

Spring MVC is built on the Servlet API and uses a synchronous blocking 
I/O architecture with a one-request-per-thread-model.

1. Servlet Containers
2. Servlet API
3. Spring Security
4. Spring MVC
5. Spring Data Repositories JDBC, JPA, NoSQL

### 学习指南

1. 学习Spring技术，要先学Spring Framework，再学Spring Boot，
2. Spring Boot学好之后，才能学Spring Cloud。这个顺序不能弄反了。
3. 早期的使用XML配置文件的Spring技术，可以跳过不学。
4. Spring Boot 2.0所引入的两个技术栈，各有其适合的应用场景，使用Servlet技术栈的，适合于开发传统Web项目。开发微服务，推荐使用Reactive技术栈。
6. 当前主流的Web技术方案是“前后端分离”，如果使用Java开发后端服务，可以使用Spring MVC或WebFlux开发RESTful Service，诸如Thymeleaf之类传统的MVC视图技术也可以不用了， Vue/React/Angular用起来更方便和强大。
