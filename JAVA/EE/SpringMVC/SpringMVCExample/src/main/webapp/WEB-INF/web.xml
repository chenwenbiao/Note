<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!--
		spring和springmvc父子容器概念介绍:

		在spring和springmvc进行整合的时候，一般情况下我们会使用不同的配置文件来配置spring(使用applicationContext.xml)
		和springmvc(使用spring-servlet.xml)，
		因此我们的应用中会存在至少2个ApplicationContext实例(分别去加载这两个xml)，
		由于是在web应用中，因此最终实例化的是ApplicationContext的子接口WebApplicationContext。
		如图:spring-springmvc.png

		图显示了2个WebApplicationContext实例，为了进行区分，分别称之为：
		Servlet WebApplicationContext、Root WebApplicationContext。 其中：

    	Servlet WebApplicationContext：这是对J2EE三层架构中的web层进行配置，
    	如控制器(controller)、视图解析器(view resolvers)等相关的bean。
    	通过spring mvc中提供的DispatchServlet来加载配置，通常情况下，配置文件的名称为spring-servlet.xml。

    	Root WebApplicationContext：这是对J2EE三层架构中的service层、dao层进行配置，
    	如业务bean，数据源(DataSource)等。通常情况下，
    	配置文件的名称为applicationContext.xml。在web应用中，其一般通过ContextLoaderListener来加载。

		1. ContextLoaderListener(上下文加载器的监听器)会被优先初始化，被初始化时，
		其会根据<context-param>元素中contextConfigLocation参数指定的配置文件路径，
		在这里就是"/WEB-INF/spring/applicationContext.xml”，来创建WebApplicationContext实例。
		并调用ServletContext的setAttribute方法，将其设置到ServletContext中，
		属性的key为”org.springframework.web.context.WebApplicationContext.ROOT”
		，最后的”ROOT"字样表明这是一个Root WebApplicationContext。

    	2、DispatcherServlet在初始化时，会根据<init-param>元素中contextConfigLocation参数指定的配置文件路径，
    	即"/WEB-INF/spring/spring-servlet.xml”，来创建Servlet WebApplicationContext。
    	同时，其会调用ServletContext的getAttribute方法来判断是否存在Root WebApplicationContext。
    	如果存在，则将其设置为自己的parent。这就是父子上下文(父子容器)的概念。

        父子容器的作用在于，当我们尝试从child context(即：Servlet WebApplicationContext)中获取一个bean时，
        如果找不到，则会委派给parent context (即Root WebApplicationContext)来查找。

        如果我们没有通过ContextLoaderListener来创建Root WebApplicationContext，
        那么Servlet WebApplicationContext的parent就是null，也就是没有parent context。

		为什么要有父子容器?

    	笔者理解，父子容器的作用主要是划分框架边界:

    	在J2EE三层架构中，在service层我们一般使用spring框架， 而在web层则有多种选择，如spring mvc、struts等。
    	因此，通常对于web层我们会使用单独的配置文件。例如在下面的案例中，一开始我们使用spring-servlet.xml来配置web层，
    	使用applicationContext.xml来配置service、dao层。
    	如果现在我们想把web层从spring mvc替换成struts，那么只需要将spring-servlet.xml替换
    	成Struts的配置文件struts.xml即可，而applicationContext.xml不需要改变。


   		 事实上，如果你的项目确定了只使用spring和spring mvc的话，你甚至可以将service 、dao、web层的bean都放
   		 到spring-servlet.xml中进行配置，并不是一定要将service、dao层的配置单独放到
   		 applicationContext.xml中，然后使用ContextLoaderListener来加载。
   		 在这种情况下，就没有了Root WebApplicationContext，只有Servlet WebApplicationContext。

   		 Root WebApplicationContext创建过程源码分析:com.journaldev.spring.source.ContextLoaderListener

   		 Servlet WebApplicationContext创建过程源码分析:DispatcherServlet负责创建Servlet WebApplicationContext，
   		 并尝试将ContextLoaderListener创建的ROOT WebApplicationContext设置为自己的parent。其类图继承关系如下所示：
   		 DispatcherServlet extends FrameworkServlet, FrameworkServlet extends HttpServletBean,
   		 HttpServletBean继承了HttpServlet,因此在应用初始化时，其init方法会被调用:
   		 org.springframework.web.servlet.HttpServletBean.init() ,HttpServletBean的init方法中，
   		 调用了initServletBean()方法，在HttpServletBean中，这个方法是空实现。
   		 FrameworkServlet覆盖了HttpServletBean中的initServletBean方法。
   		 见com.journaldev.spring.source.FrameworkServlet
	 -->

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!--创建Root WebApplicationContext-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/applicationContext.xml</param-value>
	</context-param>
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<!--创建Servlet WebApplicationContext-->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<!--DispatcherServlet是Spring MVC应用程序的控制器类，
		所有客户端请求都由此servlet处理。 配置是从spring-servlet.xml文件加载的-->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/spring-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>

</web-app>
