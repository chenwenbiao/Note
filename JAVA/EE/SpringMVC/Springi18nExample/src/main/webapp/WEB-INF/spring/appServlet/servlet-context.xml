<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!--Spring Bean配置文件是所有魔法发生的地方。 这是Spring框架的优点，
	因为它有助于我们更多地关注业务逻辑而不是编写琐碎的任务。 -->

	<!-- DispatcherServlet Context: defines this servlet's request-processing
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!--messageSource bean被配置为我们的应用程序启用i18n。
	basename属性用于提供资源包的位置。
	classpath：messages表示资源包位于类路径中，并且名称模式遵循messages_{locale}.properties。
	defaultEncoding属性用于定义用于消息的编码。-->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basename" value="classpath:messages" />
		<beans:property name="defaultEncoding" value="UTF-8" />
	</beans:bean>

	<!--类型为org.springframework.web.servlet.i18n.CookieLocaleResolver的localeResolver bean
	用于在客户端请求中设置cookie，以便进一步的请求可以轻松识别用户区域设置。
	例如，我们可以要求用户在第一次启动Web应用程序时选择语言环境，
	并且使用cookie，我们可以识别用户区域设置并自动发送特定于语言环境的响应。
	我们还可以在客户端浏览器过期和删除之前指定cookie的默认语言环境，cookie name和maximum age。

	如果您的应用程序维护用户会话，那么您还可以
	使用org.springframework.web.servlet.i18n.SessionLocaleResolver作为
	localeResolver来在用户的会话中使用locale属性。 配置类似于CookieLocaleResolver。-->
	<!--如果我们不注册任何“localeResolver”，默认情况下将使用AcceptHeaderLocaleResolver，
	它通过检查客户端HTTP请求中的accept-language标头来解析用户区域设置。-->
	<beans:bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<beans:property name="defaultLocale" value="en" />
		<beans:property name="cookieName" value="myAppLocaleCookie"></beans:property>
		<beans:property name="cookieMaxAge" value="3600"></beans:property>
	</beans:bean>

	<!--org.springframework.web.servlet.i18n.LocaleChangeInterceptor拦截器被配置用来
	拦截用户请求并识别用户区域设置。
	参数名称是可配置的，我们使用locale的请求参数名称作为“locale”:http://localhost:8080/test/?locale=fr,
	如果没有此拦截器，我们将无法更改用户区域设置并根据用户的新区域设置发送响应。
	它需要是拦截器元素的一部分，否则Spring不会将其配置为拦截器。-->
	<interceptors>
		<beans:bean
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<beans:property name="paramName" value="locale" />
		</beans:bean>
	</interceptors>

	<context:component-scan base-package="com.journaldev.spring" />

</beans:beans>
