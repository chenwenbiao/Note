<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <!-- mybatis使用namespace.id的方式来唯一定位一个sql.
    -->
<mapper namespace="org.mybatis.core.mapper.UserMapper">
    <!--
        通过namespace.id唯一定位这个sql。

        正向映射：是我们通过保存java对象，来保存数据
        反向映射：是我们从数据库查询数据，将数据库记录查出来封装到java对象中
     -->

    <!--
        正向映射通过parameterType属性指定，如insert和update元素，parameterType属性值
        为org.mybatis.core.model.User，这是一个java对象。mybatis会自动帮我们将java对象的值取出来，
        来替换sql中的变量。例如insert和update中的#{name}和#{age}就分别会被User对象的name和age属性值替换，
        即mybatis会调用user.getName()来替换#{name}，调用user.getAge()来替换#{age}。

        不过我们还看到了，delete和select元素也配置了parameterType属性，
        这是因为在删除和查询的时候，我们也是需要指定条件的。
        这两个元素(select和delete)指定parameterType类型都是int，对应java的包装数据类型Integer。-->
    <insert id="insert" parameterType="org.mybatis.core.model.User">
             INSERT INTO user(id,name,age) VALUES (#{id},#{name},#{age})
    </insert>

    <insert id="insertByAutoIncrKey" parameterType="org.mybatis.core.model.User"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user(name, age) VALUES (#{name}, #{age})
    </insert>

    <insert id="batchInsert" parameterType="java.util.List"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (id, name, age) VALUES
        <foreach collection="list" item="user" index="index" separator="," >
            (#{user.id}, #{user.name}, #{user.age})
        </foreach>
    </insert>

    <insert id="insertSelectKey" parameterType="User">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT last_insert_id();
        </selectKey>
        INSERT INTO user ( name, age) VALUES ( #{name}, #{age})
    </insert>

    <!--
        我们可以将<insert>、<select>中parameterType、resultType属性值直接指定为User，
        即使用mybatis-config.xml中的typeAlias别名.
    -->
    <select id="selectById" parameterType="int" resultType="User">
             SELECT id,name,age FROM user where id= #{id}
    </select>

    <!-- 反向映射通过resultType或者resultMap属性指定，这两个属性只能出现在<select>元素中。
       在UserMapper.xml配置中，只出现了resultType，resultMap我们将在之后讲解。

       这里<select>元素配置的resultType属性值也是org.mybatis.core.model.User，
       表示将数据库结果封装到这个User类中。

       resultType这种反向映射关系是“基于数据库表字段”与“User类属性”是完全对应的。
       例如对于数据库id、name、age字段，会自动调用User类的、setId、setName、setAge方法进行设置。
       如果表字段与实体属性不能一一对应的话，如数据库表字段为username，
       但是java类中定义的属性为name，则无法进行映射。-->
    <select id="selectAll" resultType="org.mybatis.core.model.User">
             SELECT id,name,age FROM user;
    </select>

    <select id="select" parameterType="hashmap" resultType="User">
      SELECT id,name,age FROM user
      where 1=1
      <if test="name != null">
        AND name like #{name}
      </if>
      <if test="age != null and age > 0">
        AND age>#{age}
      </if>
    </select>

    <!--还是上面的例子，但是这次变为提供了“name”就按“name”查找，
    提供了“age”就按“age”查找，若两者都没有提供，就返回所有id>5的用户。-->
    <select id="selectChoose" parameterType="hashmap" resultType="User">
        SELECT id,name,age FROM user
        WHERE 1=1
        <choose>
            <when test="name != null">
                AND name like #{name}
            </when>
            <when test="age !=null and age >0">
                AND age>#{age}
            </when>
            <otherwise>
                AND id>5
            </otherwise>
        </choose>
    </select>

    <update id="updateById" parameterType="org.mybatis.core.model.User">
             UPDATE user SET name=#{name},age=#{age} WHERE id=#{id}
       </update>
    <delete id="deleteById" parameterType="int">
             DELETE FROM user WHERE id=#{id}
       </delete>

    <delete id="deleteAll">
             DELETE FROM user
    </delete>
</mapper>