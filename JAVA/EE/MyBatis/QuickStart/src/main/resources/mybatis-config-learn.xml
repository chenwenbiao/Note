<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
        MyBatis的全局配置文件可以配置的属性如下

        - properties 属性
        - settings 设置
        - typeAliases 类型别名
        - typeHandlers 类型处理器
        - objectFactory 对象工厂
        - plugins 插件
        - environments 环境
          - environment 环境变量
            - transactionManager 事务管理器
            - dataSource 数据源
        - databaseIdProvider 数据库厂商标识
        - mappers 映射器
    -->

    <!-- cofiguration元素：全局配置文件的根元素，作为mybatis对配置进行解析的入口,注意这里面的标签是有顺序的-->


    <!--MyBatis使用properties来引入外部properties配置文件的内容，
        resource：引入类路径下的资源，url用于引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="org/mybatis/example/config.properties"/>

    <!--
        常用的Setting设置:mapUnderscoreToCamelCase,
        defaultStatementTimeout,logPrefix
    -->
    <settings>
        <!--logger公共前缀，value值随意，不过记得加上一个"."-->
        <setting name="logPrefix" value="mybatis."/>
        <!--全局开启或关闭配置文件中的所有映射器任何缓存,默认值true,也就是会全局开启-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关，默认值true-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--开启，任何方法的调用都会加载该对象的所有属性。
            否则，每个属性会按需加载，默认值true-->
        <setting name="aggressiveLazyLoading" value="true"/>
        <!--是否允许单一语句返回多结果集，默认值true-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名。，默认值true-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键如果设置为 true 则这个设置强制使用自动生成主键,默认值true-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。NONE 表示取消自动映射；
        PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。FULL 会自动映射任意复杂的结果集,
        NONE, PARTIAL, FULL-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定发现自动映射目标未知列（或者未知属性类型）的行为。 NONE: 不做任何反应
        WARNING: 输出提醒,NONE, WARNING, FAILING-->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。SIMPLE REUSE BATCH-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。任意正整数-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。任意正整数-->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。,默认true-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。默认true-->
        <setting name="safeResultHandlerEnabled" value="false"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载。	-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!--指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。-->
        <setting name="callSettersOnNulls" value="true"/>
        <!--当返回行的所有列都是空时，MyBatis默认返回null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）-->
        <setting name="returnInstanceForEmptyRow" value="true"/>
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。-->
        <setting name="logImpl" value="实现类"/>
        <!--指定 Mybatis 创建具有延迟加载能力的对象用到的代理工具。	-->
        <setting name="proxyFactory" value="CGLIB"/>

    </settings>


    <!--列出所有类的别名。存在的意义仅在于用来减少类完全限定名的冗余->
    <typeAliases>

        <!--指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，
        给包和子包下的所有类起一个默认的别名（类名小写）.package和typeAlias不能共存,
        每一个在包 `domain.blog` 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小
        写的非限定类名来作为它的别名。 比如 `domain.blog.Author` 的别名为 `author`；
        若有注解，则别名为其注解值:
        @Alias("author")
        public class Author {}
        -->
        <!--<package name="org.mybatis.core.model"/>-->

        <!--针对单个别名定义-->
        <typeAlias  alias="User" type="org.mybatis.core.model.User"/>
        
        <!--如果我们有多个类需要起别名，则需要将所有的别名都列出,-->
        <!--特别的，如果这些类都位于同一个包下，我们可以直接通过package属性指定，不需要逐一列出,这就是批量别名定义-->
        <package name="org.mybatis.core.model"/>

        <!--
        默认会使用java实体类首字母小写的非限定类名来作为它的别名。
        比如 domain.blog.Author 的别名为 author；我们也可以使用@Alias注解，来指定别名，如：

            @Alias("author")
            public class Author {
                ...
            }
         -->
    </typeAliases>

    <environments default="development">

        <!--environments元素：
            表示环境配置。在实际开发中，我们通常有多个环境，例如开发环境(development)、
            测试环境(test)、生产环境(production)等，不同的环境的配置都是不同的。
            因此在environments元素中，可以配置多个表示具体某个环境的environment子元素。
            而default属性用于指定默认的环境。
            尽管可以配置多个环境，每个 SqlSessionFactory 实例只能选择其一,
            所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。
            而如果是三个数据库，就需要三个实例
        -->

        <environment id="development">
            <!--
            environment元素：表示具体的某个环境，以id属性作为标识。
            每个environment元素内部都必须要配置2个子元素：transactionManager和dataSource。
            -->

            <!--transactionManager:事务管理器，属性type取值有2个，JDBC|MANAGED。
            其中：JDBC表示任何对数据库的修改操作，mybatis都会自动开启事务。
            这里配置的是MANAGED，表示事务由应用程序来控制，也就是我们需要手动的开启事务和提交事务。
            和spring整合时，开启和提交事务的操作交由spring来管理。-->
            <transactionManager type="MANAGED" />

            <!-- mybatis提供了3种数据源类型,分别是UNPOOLED|POOLED|JNDI-->
            <!-- POOLED表示支持JDBC数据源连接池 -->
            <!-- UNPOOLED表示不支持数据源连接池 -->
            <!-- JNDI表示支持外部数据源连接池 -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver" />
                <property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
                <property name="username" value="root" />
                <property name="password" value="password" />
            </dataSource>
        </environment>
        <environment id="test">
            <!--type="JDBC" 代表使用jdbc的提交和回滚来管理事务-->
            <transactionManager type="JDBC">
                <property name="..." value="..."/>
            </transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="mapper/UserMapper.xml"/>
    </mappers>

    <!--mappers元素：

       表示映射文件列表，我们针对每张表，都会建立一个映射文件。
       而在mappers元素中，就通过mapper元素，列出了所有配置文件的路径。

       mapper元素可以通过以下属性指定映射文件的路径：

       resource属性：表示映射文件位于classpath下mappers目录中的UserMapper.xml映射文件

       url属性：使用完全限定资源定位符指定映射文件路径，如file:///var/mappers/AuthorMapper.xml

       class属性：通过java类来配置映射关系

       package：如果有多个java映射类，且位于同一个包下面，我们可以直接使用package属性指定包名.
    -->

</configuration>