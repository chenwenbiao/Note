<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- cofiguration元素：全局配置文件的根元素，作为mybatis对配置进行解析的入口,注意这里面的标签是有顺序的-->


    <settings>
        <!--logger公共前缀，value值随意，不过记得加上一个"."-->
        <setting name="logPrefix" value="mybatis."/>
    </settings>


    <!--列出所有类的别名-->
    <typeAliases>
        <!--alias表示别名，type表示类的全路径-->
        <typeAlias  alias="User" type="org.mybatis.core.model.User"/>
        <!--如果我们有多个类需要起别名，则需要将所有的别名都列出,-->
        <!--特别的，如果这些类都位于同一个包下，我们可以直接通过package属性指定，不需要逐一列出。-->
        <!--<package name="org.mybatis.core.model"/>-->

        <!--
        默认会使用java实体类首字母小写的非限定类名来作为它的别名。
        比如 domain.blog.Author 的别名为 author；我们也可以使用@Alias注解，来指定别名，如：

            @Alias("author")
            public class Author {
                ...
            }
         -->
    </typeAliases>

    <environments default="development">

        <!--environments元素：
            表示环境配置。在实际开发中，我们通常有多个环境，例如开发环境(development)、
            测试环境(test)、生产环境(production)等，不同的环境的配置都是不同的。
            因此在environments元素中，可以配置多个表示具体某个环境的environment子元素。
            而default属性用于指定默认的环境。
        -->

        <environment id="development">
            <!--
            environment元素：表示具体的某个环境，以id属性作为标识。
            每个environment元素内部都必须要配置2个子元素：transactionManager和dataSource。
            -->

            <!--transactionManager:事务管理器，属性type取值有2个，JDBC|MANAGED。
            其中：JDBC表示任何对数据库的修改操作，mybatis都会自动开启事务。
            这里配置的是MANAGED，表示事务由应用程序来控制，也就是我们需要手动的开启事务和提交事务。
            和spring整合时，开启和提交事务的操作交由spring来管理。-->
            <transactionManager type="MANAGED" />

            <!--dataSource：表示数据源配置。这个更好理解，因为不同的环境中，
            我们访问的数据库url、username、password都是不同的，因此在每个environment元素下面都有
            一个dataSource配置。属性type表示使用的数据源类型，取值有三个：UNPOOLED|POOLED|JNDI，
            这里指定POOLED，表示使用mybatis自带的PooledDataSource。
            而dataSource内部通过property元素配置的属性，都是PooledDataSource支持的。
            注意不同的数据源实现，可以配置的property是不同的。
        -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver" />
                <property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
                <!--修改为你自己的用户名密码-->
                <property name="username" value="root" />
                <property name="password" value="password" />
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="mapper/UserMapper.xml"/>
    </mappers>

    <!--mappers元素：

       表示映射文件列表，前面提到通常我们针对数据库中每张表，都会建立一个映射文件。
       而在mappers元素中，就通过mapper元素，列出了所有配置文件的路径。
       例如mapper元素可以通过以下属性指定映射文件的路径：

       resource属性：表示映射文件位于classpath下。例如上面的配置中就表示在classpath的mappers目录下，
       有一个UserMapper.xml映射文件

       url属性：使用完全限定资源定位符指定映射文件路径，如file:///var/mappers/AuthorMapper.xml

       class属性：通过java类来配置映射关系，可以一个java映射类对应一个xml映射文件

       package：如果有多个java映射类，且位于同一个包下面，我们可以直接使用package属性指定包名，
       不需要为每个java映射配置一个class属性。

       最常见的方式还是通过resource属性来指定。
    -->

</configuration>