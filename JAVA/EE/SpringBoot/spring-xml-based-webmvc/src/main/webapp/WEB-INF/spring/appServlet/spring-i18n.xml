<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xmlns="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

    <!-- Enables the Spring MVC @Controller programming model,注释驱动的bean配置 -->
    <annotation-driven/>

    <!--resources element定义了我们可以放置静态文件的位置.-->
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving
        up static resources in the ${webappRoot}/resources directory -->
    <resources mapping="/resources/**" location="/resources/"/>

    <!--定义模板解析器以及模板的位置以及后缀-->
    <!-- Resolves views selected for rendering by @Controllers to .jsp resources
        in the /WEB-INF/views directory -->
    <beans:bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/"/>
        <beans:property name="suffix" value=".jsp"/>
    </beans:bean>

    <!--dataSource bean是为org.apache.commons.dbcp.BasicDataSource类定义的，用于基本连接 -->
    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
                destroy-method="close">
        <beans:property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <beans:property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
        <beans:property name="username" value="root"/>
        <beans:property name="password" value="password"/>
    </beans:bean>

    <!-- Hibernate 4 SessionFactory Bean definition,LocalSessionFactoryBean bean用于Hibernate 4 SessionFactory -->
    <beans:bean id="hibernate4AnnotatedSessionFactory"
                class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>com.legacy.springmvc.model.Person</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
                </beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>

    <beans:bean id="personDAO" class="com.legacy.springmvc.dao.impl.PersonDAOImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory"/>
    </beans:bean>

    <beans:bean id="personService" class="com.legacy.springmvc.service.impl.PersonServiceImpl">
        <beans:property name="personDAO" ref="personDAO"></beans:property>
    </beans:bean>

    <!-- Spring MVC拦截器配置,在通过mapping element匹配URI-->
    <!-- Configuring interceptors based on URI -->
    <interceptors>
        <interceptor>
            <mapping path="/persons" />
            <beans:bean class="com.legacy.springmvc.interceptor.RequestProcessingTimeInterceptor">
            </beans:bean>
        </interceptor>
    </interceptors>

    <!-- context：component-scan用于提供要扫描组件的包-->
    <context:component-scan base-package="com.legacy.springmvc"/>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--需要org.springframework.orm.hibernate4.HibernateTransactionManager的transactionManager bean定义来支持hibernate会话事务管理-->
    <!--Spring使用AOP进行事务管理，现在可以将它与@Transactional注释联系起来-->
    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory"/>
    </beans:bean>

    <beans:bean id="messageSource"
                class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!--basename属性用于提供资源包的位置-->
        <!--classpath：messages表示资源包位于类路径中，并且名称模式遵循messages_{locale}.properties-->
        <beans:property name="basename" value="classpath:messages" />
        <!--defaultEncoding属性用于定义用于消息的编码-->
        <beans:property name="defaultEncoding" value="UTF-8" />
    </beans:bean>

    <!--CookieLocaleResolver的bean用于在客户端请求中设置关于locale的cookie，以便以后的请求可以根据cookie识别用户区域,进而发送特定语言环境的响应.可以要求用户在第一次启动Web应用程序时选择语言环境，并且使用cookie记录，这样后续的请求中,我们可以根据cookie识别用户区域.-->

    <!--如果我们不注册任何“localeResolver”，默认情况下将使用AcceptHeaderLocaleResolver，
    它通过HTTP请求中的accept-language标头来解析用户区域,进而返回相应的响应-->
    <beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <beans:property name="defaultLocale" value="en" />
        <beans:property name="cookieName" value="myAppLocaleCookie"></beans:property>
        <beans:property name="cookieMaxAge" value="3600"></beans:property>
    </beans:bean>

    <!--LocaleChangeInterceptor位置改变的拦截器配置, 用来拦截用户请求并识别用户区域的改变.
    如果没有此拦截器，我们将无法更改用户locale设置,并根据用户的新区域设置发送响应。-->
    <interceptors>
        <beans:bean
                class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <!--参数名称是可配置的，我们使用locale的请求参数名称作为“locale”:http://localhost:8080/test/?locale=fr,-->
            <beans:property name="paramName" value="locale" />
        </beans:bean>
    </interceptors>

</beans:beans>
