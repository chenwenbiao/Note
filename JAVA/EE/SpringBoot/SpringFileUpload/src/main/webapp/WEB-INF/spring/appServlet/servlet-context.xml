<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/**" location="/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!--要利用Apache Commons FileUpload来处理multipart requests，
	我们需要做的就是使用类org.springframework.web.multipart.commons.CommonsMultipartResolver
	配置multipartResolver bean。-->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		 <!-- setting maximum upload size -->
		<beans:property name="maxUploadSize" value="100000" />

		<!--请注意，我通过为multipartResolver bean提供maxUploadSize属性值来设置最大上载大小限制。
		如果您将查看DispatcherServlet类的源代码，您将看到名为multipartResolver的MultipartResolver变量
		已定义并在以下方法中初始化：
		private void initMultipartResolver(ApplicationContext context)
	  {
		try
		{
		  this.multipartResolver = ((MultipartResolver)context.getBean("multipartResolver", MultipartResolver.class));
		  if (this.logger.isDebugEnabled()) {
			this.logger.debug("Using MultipartResolver [" + this.multipartResolver + "]");
		  }
		}
		catch (NoSuchBeanDefinitionException ex)
		{
		  this.multipartResolver = null;
		  if (this.logger.isDebugEnabled())
			this.logger.debug("Unable to locate MultipartResolver with name 'multipartResolver': no multipart request handling provided");
		}
	  }
		-->
		<!--使用此配置，任何具有enctype作为multipart/form-data的请求将在传递
		给Controller类之前由multipartResolver处理。-->
	</beans:bean>


	<context:component-scan base-package="com.journaldev.spring.controller" />



</beans:beans>
