<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!--
		如果查看上面的所有类，它们都使用标准JDBC API，并且没有对Spring JDBC框架的引用。
		当我们创建Spring Bean配置文件并定义bean时，Spring JDBC框架类就会出现。
		 我们将在Spring Bean上下文文件中创建DataSource并将其设置为我们的DAO实现类。

		我的Spring Bean配置文件如下所示:
		
		首先，我们创建一个类DriverManagerDataSource的DataSource对象。 
		该类提供了我们可以使用的DataSource的基本实现。 我们将MySQL数据库URL，用户名和密码作为属性传递给DataSource other。
		
		再次将dataSource bean设置为EmployeeDAOImpl other，我们就可以使用Spring JDBC实现了。
		 实现是松散耦合的，如果我们想切换到其他实现或转移到其他数据库服务器，
		 我们所需要的只是在bean配置中进行相应的更改。 这是Spring JDBC框架提供的主要优势之一。
	-->
	
	<bean id="employeeDAO" class="com.legacy.springmvc.jdbc.dao.EmployeeDAOImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--  
		要使用Spring JdbcTemplate实现，我们只需要更改Spring Bean配置文件中的employeeDAO类，如下所示。
		
		<other id="employeeDAO" class="EmployeeDAOJDBCTemplateImpl">
			<property name="dataSource" ref="dataSource" />
		</other>
		
		当您运行主类时，Spring JdbcTemplate实现的输出将类似于上面使用普通JDBC实现的输出。
	-->
	
	<bean id="employeeDAOJDBCTemplate" class="com.legacy.springmvc.jdbc.dao.EmployeeDAOJDBCTemplateImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/TestDB" />
		<property name="username" value="pankaj" />
		<property name="password" value="pankaj123" />
	</bean>

	<bean id="ds1">

	</bean>

</beans>
