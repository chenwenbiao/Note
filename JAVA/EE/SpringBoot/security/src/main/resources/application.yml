spring:
  application:
    name: security
  output:
    ansi:
      enabled: DETECT

#security:
#  user:
#    name: admin
#    password: password

server:
  port: 9090

logging:
  level:
    root: DEBUG
    spring:
      security:
        core: INFO
    org:
      springframework:
        web: DEBUG
        security: DEBUG

# debug: true

# ///////////////////////////////////////////日志输出色彩控制////////////////////////////////////
# 如果你的终端支持ANSI，设置彩色输出会让日志更具可读性.通过在application.properties中设置spring.output.ansi.enabled参数来支持,其中:

#1. NEVER：禁用ANSI-colored输出(默认项）
#2. DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出(推荐项）
#3. ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用
# ////////////////////////////////////////////////////////////////////////////////////////////////


# ///////////////////////////////////////日志输出级别控制///////////////////////////////////////
# 在application.properties中进行配置完成日志记录的级别控制。
# 配置格式：logging.level.*=LEVEL
# logging.level：日志级别控制前缀，*为包名或Logger名
# LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF,可以使用root级别和package级别来控制日志的输入级别.

# 举例：
# logging.level.spring.security.core=DEBUG：spring.security.core包下所有class以DEBUG级别输出
# logging.level.root=WARN：root日志以WARN级别输出
# logging.level.root= WARN
#logging.level.org.springframework.security= DEBUG
#logging.level.org.springframework.web= ERROR
#logging.level.org.hibernate= DEBUG
#logging.level.org.apache.commons.dbcp2= DEBUG

# 通过命令行改变日志的输出级别
# Sping Boot 默认输出ERROR , WARN , INFO 级别的日志。我们可以通过命令行使能DEBUG ,TRACE级别的日志输出，
# 效果是跟配置文件一样的。想象我们有一个名为my-app.jar的可执行的JAR包我们可以在启动应用是使能DEBUG级别日志输出。
# java -jar my-app.jar --debug
# 或者在application.properties中配置
# debug=true

# 相同的方式使能TRACE级别的日志
# java -jar my-app.jar --trace
# 在application.properties
# trace=true
# ///////////////////////////////////////////////////////////////////////////////////////////////

## ///////////////////////////////////////////////文件输出/////////////////////////////////////////
# Spring Boot默认配置只会输出到控制台，并不会记录到文件中，但是我们通常生产环境使用时都需要以文件方式记录。
# 若要增加文件输出，需要在application.properties中配置logging.file或logging.path属性。

# logging.file，用来定义文件名。他不仅仅可以配置文件名，也可以路径+文件名。如：logging.file=my.log,如果没有配置logging.path,将在根目录中创建.我们也可以为为mylogfile.log分配一个路径，如concretepage/mylogfile.log。这种情况下我们将在相对根目录下创建.

# logging.path，配置日志的路径(可以是相对,也可以是绝对路径)。如果没有配置logging.file,Spring Boot 将默认使用spring.log作为文件名。如：logging.path=/var/log

# 日志文件会在10Mb大小的时候被截断，产生新的日志文件
# ///////////////////////////////////////////////////////////////////////////////////////////////



### /////////////////////////////////////////////自定义输出格式
# 在Spring Boot中可以通过在application.properties配置如下参数控制输出格式：

# 1. logging.pattern.console：定义输出到console的样式(不支持JDK Logger）,我们也可以为为mylogfile.log分配一个路径，如concretepage/mylogfile.log。这种情况下我们将在相对根目录下创建
# logging.pattern.console= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n

# 2. logging.pattern.file：定义输出到file的样式(不支持JDK Logger）
# logging.pattern.file= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n

# logging.pattern.level :定义渲染不同级别日志的格式。默认是%5p.
# ////////////////////////////////////////////////////////////////////////////