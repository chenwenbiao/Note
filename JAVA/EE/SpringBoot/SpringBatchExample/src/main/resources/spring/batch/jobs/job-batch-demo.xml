<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	">
	<!--
		Spring Batch Job Configuration

		我们必须在配置文件中定义spring bean和spring批处理作业。 以下是job-batch-demo.xml文件的内容，它是spring批处理项目中最重要的部分。

		我们使用FlatFileItemReader读取CSV文件，CustomItemProcessor使用StaxEventItemWriter处理数据并写入XML文件。
batch：job  - 此标记定义我们要创建的作业。 Id属性指定作业的ID。我们可以在一个xml文件中定义多个作业。
batch：step  - 此标记用于定义spring批处理作业的不同步骤。
Spring Batch Framework提供了两种不同类型的处理方式，即“TaskletStep Oriented”和“Chunk Oriented”。在这个例子中使用的Chunk Oriented风格是指逐个读取数据并在事务边界内创建将被写出的“块”。
读者：用于读取数据的spring bean。我们在这个示例中使用了csvFileItemReader bean，它是FlatFileItemReader的实例。
处理器：这是用于处理数据的类。我们在这个例子中使用了CustomItemProcessor。
writer：bean用于将数据写入xml文件。
commit-interval：此属性定义处理完成后将提交的块的大小。基本上它意味着ItemReader将逐个读取数据，而ItemProcessor也将以相同的方式处理它，但ItemWriter只有在它等于commit-interval的大小时才会写入数据。
作为此项目的一部分使用的三个重要接口是org.springframework.batch.item包中的ItemReader，ItemProcessor和ItemWriter。
	-->
	<import resource="../config/context.xml" />
	<import resource="../config/database.xml" />

	<bean id="report" class="com.journaldev.spring.model.Report"
		scope="prototype" />
	<bean id="itemProcessor" class="com.journaldev.spring.CustomItemProcessor" />

	<batch:job id="DemoJobXMLWriter">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="csvFileItemReader" writer="xmlItemWriter"
					processor="itemProcessor" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="csvFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

		<property name="resource" value="classpath:csv/input/report.csv" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="id,firstname,lastname,dob" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.journaldev.spring.ReportFieldSetMapper" />

					<!-- if no data type conversion, use BeanWrapperFieldSetMapper to map 
						by name <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"> 
						<property name="prototypeBeanName" value="report" /> </bean> -->
				</property>
			</bean>
		</property>

	</bean>

	<bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
		<property name="resource" value="file:xml/outputs/report.xml" />
		<property name="marshaller" ref="reportMarshaller" />
		<property name="rootTagName" value="report" />
	</bean>

	<bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>com.journaldev.spring.model.Report</value>
			</list>
		</property>
	</bean>


</beans>