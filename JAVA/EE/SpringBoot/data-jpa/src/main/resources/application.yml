spring:
  application:
    name: data-jpa
  # JPA配置:
  jpa:
    show-sql: true
    hibernate.ddl-auto: update

server:
  port: 9090

# // ------------------------------数据源DataSource相关说明---------------------------------
# 定义数据库连接信息的相关配置参数,以spring.datasource打头（如使用嵌入式数据库则不需要）
# Spring Boot会尽可能地依据数据源URL去判断数据源是什么类型的，然后根据其默认的情况去匹配驱动类，
# 下述配置信息足以让其知道需要加载MySQL的JDBC数据库驱动程序。
# spring.datasource.url=jdbc:mysql://localhost:3306/mydb?characterEncoding=utf8&useSSL=false
# spring.datasource.username=root
# spring.datasource.password=password
# spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# // ------------------------------------END----------------------------------------------------


# // --------------------------------Spring Data JPA相关的配置---------------------------------
# 1. 注意: Spring Data JPA相关的配置，都以"spring.jpa"打头
# 2. 为了便于学习，可以配置Spring Data JPA显示它所发出的SQL命令: spring.jpa.show-sql=true
#
# 3. spring.jpa.properties.hibernate.hbm2ddl.auto是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：
#
#  create：每次加载hibernate时都会删除上一次生成的表，然后根据你的model类再重新来生成新表，
#  哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#  create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#  update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），
#  以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。
#  要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#  validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。


# After doing this, the schema file was generated automatically in the project root.
# spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql


# JPA属性配置: https://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html#howto-configure-jpa-properties
# https://stackoverflow.com/questions/36966337/how-to-generate-a-ddl-creation-script-with-a-modern-spring-boot-data-jpa-and-h